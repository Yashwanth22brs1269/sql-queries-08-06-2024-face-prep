
CREATE DATABASE ORG1;
SHOW DATABASES;
USE ORG1;
CREATE TABLE Worker1 (
  WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
  FIRST_NAME CHAR(25),
  LAST_NAME CHAR(25),
  SALARY INT,
  JOINING_DATE DATETIME,
  DEPARTMENT CHAR(25)
);

INSERT INTO Worker1
(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE,
DEPARTMENT) VALUES
(001, 'Monika', 'Arora', 100000, '14-02-20
09.00.00', 'HR'),
(002, 'Niharika', 'Verma', 80000, '14-06-11
09.00.00', 'Admin'),
(003, 'Vishal', 'Singhal', 300000, '14-02-20
09.00.00', 'HR'),
(004, 'Amitabh', 'Singh', 500000, '14-02-20
09.00.00', 'Admin'),
(005, 'Vivek', 'Bhati', 500000, '14-06-11
09.00.00', 'Admin'),
(006, 'Vipul', 'Diwan', 200000, '14-06-11
09.00.00', 'Account'),
(007, 'Satish', 'Kumar', 75000, '14-01-20
09.00.00', 'Account'),
(008, 'Geetika', 'Chauhan', 90000, '14-04-11
09.00.00', 'Admin');

CREATE TABLE Bonus2 (
WORKER_REF_ID INT,
BONUS_AMOUNT INT,
BONUS_DATE DATETIME,
FOREIGN KEY (WORKER_REF_ID)
REFERENCES Worker1(WORKER_ID)
 ON DELETE CASCADE
);
INSERT INTO Bonus2
(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
(001, 5000, '16-02-20'),
(002, 3000, '16-06-11'),
(003, 4000, '16-02-20'),
(001, 4500, '16-02-20'),
(002, 3500, '16-06-11');

CREATE TABLE Title3 (
WORKER_REF_ID INT,
WORKER_TITLE CHAR(25),
AFFECTED_FROM DATETIME,
FOREIGN KEY (WORKER_REF_ID)
REFERENCES Worker1(WORKER_ID)
 ON DELETE CASCADE
);

INSERT INTO Title3
(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
(001, 'Manager', '2016-02-20 00:00:00'),
(002, 'Executive', '2016-06-11 00:00:00'),
(008, 'Executive', '2016-06-11 00:00:00'),
(005, 'Manager', '2016-06-11 00:00:00'),
(004, 'Asst. Manager', '2016-06-11 00:00:00'),
(007, 'Executive', '2016-06-11 00:00:00'),
(006, 'Lead', '2016-06-11 00:00:00'),
(003, 'Lead', '2016-06-11 00:00:00');


SELECT FIRST_NAME AS WORKER_NAME FROM Worker1;

SELECT UPPER(FIRST_NAME) FROM Worker1;

SELECT DISTINCT DEPARTMENT
FROM Worker1;

SELECT SUBSTRING(FIRST_NAME, 1, 3) FROM Worker1;

SELECT INSTR(FIRST_NAME, 'a') FROM Worker1 WHERE FIRST_NAME = 'Amitabh';

SELECT RTRIM(FIRST_NAME) AS FIRST_NAME
FROM Worker1;

SELECT LTRIM(DEPARTMENT) AS DEPARTMENT FROM Worker1;

SELECT DEPARTMENT, LENGTH(DEPARTMENT) FROM Worker1 GROUP BY DEPARTMENT;

SELECT REPLACE(FIRST_NAME, 'a', 'A') AS FIRST_NAME FROM Worker1;

SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS COMPLETE_NAME
FROM Worker1;

SELECT *
FROM Worker1
ORDER BY FIRST_NAME ASC;

SELECT *
FROM Worker1
ORDER BY FIRST_NAME ASC, DEPARTMENT DESC;

SELECT *
FROM Worker1
WHERE FIRST_NAME IN ('Vipul', 'Satish');

SELECT *
FROM Worker1
WHERE FIRST_NAME NOT IN ('Vipul', 'Satish');

SELECT *
FROM Worker1
WHERE DEPARTMENT = 'Admin';

SELECT *
FROM Worker1
WHERE FIRST_NAME LIKE '%a%';

SELECT *
FROM Worker1
WHERE FIRST_NAME LIKE '%a';

SELECT *
FROM Worker1
WHERE FIRST_NAME LIKE '_____h';

SELECT *
FROM Worker1
WHERE SALARY BETWEEN 100000 AND 500000;

SELECT *
FROM Worker1
WHERE YEAR(JOINING_DATE) = 2014 AND MONTH(JOINING_DATE) = 2;

SELECT COUNT(*) AS employee_count
FROM Worker1
WHERE DEPARTMENT = 'Admin';

SELECT FIRST_NAME, LAST_NAME
FROM Worker1
WHERE SALARY BETWEEN 50000 AND 100000;

SELECT DEPARTMENT, COUNT(*) AS worker_count
FROM Worker1
GROUP BY DEPARTMENT
ORDER BY worker_count DESC;

SELECT *
FROM Worker1
WHERE WORKER_ID IN (
    SELECT WORKER_REF_ID
    FROM Title3
    WHERE WORKER_TITLE = 'Manager'
);

SELECT FIRST_NAME, LAST_NAME, COUNT(*)
FROM Worker1
GROUP BY FIRST_NAME, LAST_NAME
HAVING COUNT(*) > 1;

WITH NumberedRows AS (
    SELECT *, ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS RowNum
    FROM Worker1
)
SELECT *
FROM NumberedRows
WHERE RowNum % 2 != 0
ORDER BY RAND();

WITH NumberedRows AS (
    SELECT *, ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS RowNum
    FROM Worker1
)
SELECT *
FROM NumberedRows
WHERE RowNum % 2 = 0;

CREATE TABLE ClonedWorkerTable AS
SELECT *
FROM Worker1;

SELECT *
FROM Worker1
INNER JOIN Bonus2 ON Worker1.WORKER_ID = Bonus2.WORKER_REF_ID;

SELECT Worker1.*
FROM Worker1
LEFT JOIN Bonus2 ON Worker1.WORKER_ID = Bonus2.WORKER_REF_ID
WHERE Bonus2.WORKER_REF_ID IS NULL;

SELECT NOW() AS CurrentDateTime;

SELECT *
FROM Worker1
LIMIT 4;

SELECT DISTINCT Salary
FROM Worker1
ORDER BY Salary DESC
LIMIT 4, 1;


SELECT Salary
FROM (
    SELECT Salary, ROW_NUMBER() OVER (ORDER BY Salary DESC) AS RowNum
    FROM Worker1
) AS Subquery
WHERE RowNum = 5;

SELECT Salary, GROUP_CONCAT(FIRST_NAME, ' ', LAST_NAME) AS Employees
FROM Worker1
GROUP BY Salary
HAVING COUNT(*) > 1;

SELECT MAX(Salary) AS SecondHighestSalary
FROM Worker1
WHERE Salary < (SELECT MAX(Salary) FROM Worker1);

SELECT *
FROM Worker1

UNION ALL

SELECT *
FROM Worker1
LIMIT 1;

SELECT *
FROM Worker1
INNER JOIN Bonus2 ON Worker1.WORKER_ID = Bonus2.WORKER_REF_ID;



SET @half_count = (SELECT CEIL(COUNT(*) * 0.5) FROM Worker1);

SELECT DEPARTMENT
FROM Worker1
GROUP BY DEPARTMENT
HAVING COUNT(*) < 5;


SELECT DEPARTMENT, COUNT(*) AS "Number of People"
FROM Worker1
GROUP BY DEPARTMENT;

SELECT *
FROM Worker1
ORDER BY WORKER_ID DESC
LIMIT 1;

SELECT *
FROM Worker1
WHERE WORKER_ID = (SELECT MIN(WORKER_ID) FROM Worker1);


SELECT *
FROM (
    SELECT *, ROW_NUMBER() OVER (ORDER BY WORKER_ID DESC) AS row_num
    FROM Worker1
) AS ordered_workers
WHERE row_num BETWEEN 1 AND 5;

WITH MaxSalaries AS (
    SELECT DEPARTMENT, MAX(SALARY) AS max_salary
    FROM Worker1
    GROUP BY DEPARTMENT
)
SELECT w.FIRST_NAME, w.LAST_NAME, w.DEPARTMENT
FROM Worker1 w
JOIN MaxSalaries m ON w.DEPARTMENT = m.DEPARTMENT AND w.SALARY = m.max_salary;

SELECT *
FROM (
    SELECT *,
           ROW_NUMBER() OVER (ORDER BY SALARY DESC) AS row_num
    FROM Worker1
) AS ranked_workers
WHERE row_num <= 3;

SELECT *
FROM (
    SELECT *,
           ROW_NUMBER() OVER (ORDER BY SALARY) AS row_num
    FROM Worker1
) AS ranked_workers
WHERE row_num <= 3;


SELECT *
FROM (
    SELECT *,
           ROW_NUMBER() OVER (ORDER BY SALARY DESC) AS row_num
    FROM Worker1
) AS ranked_workers
WHERE row_num = 2;

SELECT DEPARTMENT, SUM(SALARY) AS total_salary_paid
FROM Worker1
GROUP BY DEPARTMENT;


SELECT FIRST_NAME, LAST_NAME
FROM Worker1
WHERE SALARY = (
    SELECT MAX(SALARY)
    FROM Worker1
);








































